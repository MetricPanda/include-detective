#!/bin/bash

# Include Detective v0.1 - by Unspongeful (https://metricpanda.com)
# Public Domain

# Version history
# v0.1 - Initial release

# Tested with GCC and Clang.

set -eou pipefail

printhelp()
{
	echo "Usage: $(basename "$0") [options] <file> [-- <compiler-options>]"
  echo "Print include statistics about a C/C++ file or system header"
  echo ""
  echo "Options:"
  echo "   -p     print the preprocessed source instead of"
  echo "          computing stats"
  echo "   -d     print the preprocessor defines"
  echo "   -f     specify input file"
  echo "   -h     show this help"
  echo ""
  echo "To inspect C++ code use the -xc++ compiler option like so:"
  echo " ./$(basename "$0") example.cpp -- -xc++"
}

# If CC env variable is not defined default to cc
if [ -z ${CC+x} ]; then
  CC=cc
fi

# Table width
if [ -z ${WIDTH+x} ]; then
  WIDTH=70
fi

main()
{
  # If the source filename points to an existing file
  # include relative to working directory, otherwise
  # use system include
  if [ -f "$INPUT_FILE" ]; then
    c_string="\"$INPUT_FILE\""
    preprocessor_output=$($CC -E $@ "$INPUT_FILE")
    defines_output=$($CC -E $@ -dM "$INPUT_FILE")
  else
    c_string="<$INPUT_FILE>"
    preprocessor_output=$(echo "#include $c_string" | $CC -E $@ -)
    defines_output=$(echo "#include $c_string" | $CC -E $@ -dM -)
  fi

  if [ $PRINT_SOURCE -eq 1 ]; then
    echo "$preprocessor_output" | sed '/^\s*$/d'
    exit 0
  fi
  if [ $PRINT_DEFINES -eq 1 ]; then
    echo "$defines_output"
    exit 0
  fi

  # Lines of code
  total_lines=$(echo "$preprocessor_output" | wc -l)
  non_comment_lines=$(echo "$preprocessor_output" | sed '/^# /d' | wc -l)
  non_blank_lines=$(echo "$preprocessor_output" | sed '/^\s*$/d' | wc -l)
  blank_lines=$(($total_lines-$non_blank_lines))
  comment_lines=$(($total_lines-$non_comment_lines))
  code_lines=$(($non_comment_lines-$blank_lines))

  # Nested includes
  # https://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html
  nested_includes=$(echo "$preprocessor_output" | { grep -e '^# [0-9]* "[^<]' || true; })
  total_includes=$(echo "$nested_includes" | cut -d' ' -f 3 | uniq | wc -l)
  non_system_include=$(echo "$nested_includes" | sed '/".*3/d' | cut -d' ' -f 3 | uniq | wc -l)
  system_include=$(($total_includes-non_system_include))

  # Preprocessor defines
  total_defines=$(echo "$defines_output" | wc -l)
  compiler_defines=$(echo "" | $CC -E -dM - | wc -l)
  include_defines=$(($total_defines-$compiler_defines))

  printheader "$c_string" "Lines of code" "Preprocessor defines" "Nested includes"

  printcell $code_lines "code"
  printcell $include_defines "from includes"
  printcell $non_system_include "user defined"
  endcolumn

  printcell $comment_lines "comments"
  printcell $compiler_defines "from compiler"
  printcell $system_include "system"
  endcolumn

  printfooter $non_blank_lines $total_defines $total_includes
}

printseparator()
{
  printf "%${SEPARATOR_WIDTH}s\n" | tr ' ' -
}

printheader()
{
  printf "$B#include $1$R expands to:\n"
  printf "\n$B%-${COLUMN_WIDTH}s%-${COLUMN_WIDTH}s%-${COLUMN_WIDTH}s$R\n" "$2" "$3" "$4"
  printseparator
}

printcell()
{
  local color=""
  if [ $1 -eq 0 ]; then
    color=""
  fi
  printf "%-${TEXT_WIDTH}s$color%5d$R   " "$2" $1
}

endcolumn()
{
  printf "\n"
}

printfooter()
{
  printseparator
  printf "%-${TEXT_WIDTH}s$B%${FIRST_COLUMN_WIDTH}d%${COLUMN_WIDTH}d%${COLUMN_WIDTH}d$R\n" "Totals:" "$1" "$2" "$3"
}

# Pretty colors only in terminal
if [ -t 1 ];  then
  R="\033[0m" # Reset
  G="\033[37m" # Gray
  B="\033[1m" # Bold
else
  R=""
  G=""
  B=""
fi

COLUMN_WIDTH=$((WIDTH/3))
SEPARATOR_WIDTH=$((WIDTH-4))
TEXT_WIDTH=$((COLUMN_WIDTH-8))
FIRST_COLUMN_WIDTH=$((COLUMN_WIDTH-(TEXT_WIDTH+3)))

PRINT_SOURCE=0
PRINT_DEFINES=0
while getopts "pf:dh" opt; do
  case $opt in
    p)
      PRINT_SOURCE=1
      ;;
    d)
      PRINT_DEFINES=1
      ;;
    f)
      INPUT_FILE="$OPTARG"
      ;;
    h)
      printhelp
      exit 1
      ;;
    \?)
      echo "Invalid option: -$opt" >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [ $# -eq 0 ] && [ -z ${INPUT_FILE+x} ]; then
  printhelp
  exit 1
else
  if [ "${2-}" == "--" ]; then
    INPUT_FILE="$1"
    shift 2
  elif [ -z ${INPUT_FILE+x} ]; then
    INPUT_FILE="$1"
    shift
  fi
  main $@
fi
